package controller

import (
	"context"
	"fmt"

	apierrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	logf "sigs.k8s.io/controller-runtime/pkg/log"

	storagev1alpha1 "github.com/kubewarden/sbomscanner/api/storage/v1alpha1"
	"github.com/kubewarden/sbomscanner/api/v1alpha1"
)

// VulnerabilityReportReconciler reconciles a VulnerabilityReport object
type VulnerabilityReportReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

// +kubebuilder:rbac:groups=storage.sbomscanner.kubewarden.io,resources=vulnerabilityreports,verbs=get;list;watch

// Reconcile reconciles a VulnerabilityReport object.
func (r *VulnerabilityReportReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := logf.FromContext(ctx)

	vulnerabilityReport := &storagev1alpha1.VulnerabilityReport{}
	if err := r.Get(ctx, req.NamespacedName, vulnerabilityReport); err != nil {
		if !apierrors.IsNotFound(err) {
			return ctrl.Result{}, fmt.Errorf("unable to fetch the VulnerabilityReport: %w", err)
		}

		return ctrl.Result{}, nil
	}

	if !vulnerabilityReport.DeletionTimestamp.IsZero() {
		return ctrl.Result{}, nil
	}

	scanJobUID, ok := vulnerabilityReport.Labels[v1alpha1.LabelScanJobUIDKey]
	if !ok {
		log.V(1).Info("VulnerabilityReport does not have ScanJob UID label, skipping", "vulnerabilityReport", req.NamespacedName)
		return ctrl.Result{}, nil
	}

	scanJobs := &v1alpha1.ScanJobList{}
	if err := r.List(ctx, scanJobs, client.MatchingFields{v1alpha1.IndexScanJobMetadataUID: scanJobUID}); err != nil {
		return ctrl.Result{}, fmt.Errorf("failed to get ScanJob by UID %s: %w", scanJobUID, err)
	}
	if len(scanJobs.Items) == 0 {
		// This can happen if the ScanJob was deleted after the VulnerabilityReport was created.
		// In this case, we just log and skip.
		log.V(1).Info("no ScanJob found for VulnerabilityReport, skipping", "vulnerabilityReport", req.NamespacedName, "scanJobUID", scanJobUID)
		return ctrl.Result{}, nil
	}
	scanJob := &scanJobs.Items[0]

	vulnerabilityReports := &storagev1alpha1.VulnerabilityReportList{}
	if err := r.List(ctx, vulnerabilityReports,
		client.InNamespace(req.Namespace),
		client.MatchingLabels{v1alpha1.LabelScanJobUIDKey: scanJobUID},
	); err != nil {
		return ctrl.Result{}, fmt.Errorf("failed to list VulnerabilityReports: %w", err)
	}

	log.V(1).Info("counted VulnerabilityReports",
		"scanJobUID", scanJobUID,
		"imagesCount", scanJob.Status.ImagesCount,
		"scannedImagesCount", len(vulnerabilityReports.Items))

	scanJob.Status.ScannedImagesCount = len(vulnerabilityReports.Items)
	// If the ScanJob is failed, we don't want to override its status conditions.
	// We still update the ScannedImagesCount in case some reports were generated before the failure.
	if !scanJob.IsFailed() {
		if scanJob.Status.ScannedImagesCount == scanJob.Status.ImagesCount {
			now := metav1.Now()
			scanJob.Status.CompletionTime = &now
			scanJob.MarkComplete(v1alpha1.ReasonAllImagesScanned, "All images scanned successfully")
		} else {
			scanJob.MarkInProgress(v1alpha1.ReasonImageScanInProgress, "Image scan in progress")
		}
	}
	if err := r.Status().Update(ctx, scanJob); err != nil {
		return ctrl.Result{}, fmt.Errorf("failed to update ScanJob status: %w", err)
	}

	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *VulnerabilityReportReconciler) SetupWithManager(mgr ctrl.Manager) error {
	err := ctrl.NewControllerManagedBy(mgr).
		For(&storagev1alpha1.VulnerabilityReport{}).
		Complete(r)
	if err != nil {
		return fmt.Errorf("failed to create VulnerabilityReport controller: %w", err)
	}

	return nil
}
